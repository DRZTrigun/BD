-- Собесодование


CREATE TABLE `social_network_chatter`.`users` (
  `id_user` INT NOT NULL AUTO_INCREMENT,
  `user_nickname` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id_user`));


INSERT INTO `social_network_chatter`.`users` (`id_user`, `user_nickname`) VALUES ('1', 'Trigun'),('2', 'Dark'), ('3', 'Leeroy Jenkins'), ('4', 'Valensio');

CREATE TABLE `social_network_chatter`.`likes` (
  `from_user` INT NOT NULL,
  `to_user` INT NOT NULL,
  PRIMARY KEY (`from_user`, `to_user`),
  INDEX `fk_to_user_idx` (`to_user` ASC) VISIBLE,
  CONSTRAINT `fk_from_user`
    FOREIGN KEY (`from_user`)
    REFERENCES `social_network_chatter`.`users` (`id_user`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_to_user`
    FOREIGN KEY (`to_user`)
    REFERENCES `social_network_chatter`.`users` (`id_user`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

INSERT INTO `social_network_chatter`.`likes` (`from_user`, `to_user`) VALUES (1, 2), (1, 3), (1, 4), (2, 1), (2, 3), (3, 1), (3, 4), (4, 1), (4, 2), (4, 3);

-- Задача 1. У вас есть социальная сеть, где пользователи (id, имя) могут ставить друг другу лайки. 
-- Создайте необходимые таблицы для хранения данной информации. Создайте запрос, который выведет информацию:
-- id пользователя;
-- имя;
-- лайков получено;
-- лайков поставлено;
-- взаимные лайки.

SELECT 
    users.id_user, users.user_nickname as `nick`,
    count(distinct l2.from_user) as `like get`,
    count(distinct l1.to_user) as `like sent`,
    SUM(if(l1.to_user = l2.from_user, 1 , 0)) as `croos like`
FROM
    users
join likes as l1  on users.id_user = l1.from_user
join likes as l2 on users.id_user = l2.to_user
group by users.id_user;


-- Задача 2. Для структуры из задачи 1 выведите список всех пользователей, 
-- которые поставили лайк пользователям A и B (id задайте произвольно), 
-- но при этом не поставили лайк пользователю C.

SELECT 
    from_user,
     sum(if(to_user = 1, 1, 0)) as t1,
     sum(if(to_user = 2, 1, 0)) as t2,
     sum(if(to_user = 3, 1, 0)) as t3
    from likes
    group by from_user
    having (t1 = 1 and t2 = 1 and t3 = 0)

-- Задача 3. Добавим сущности «Фотография» и «Комментарии к фотографии». 
-- Нужно создать функционал для пользователей, который позволяет ставить лайки не только пользователям, 
-- но и фото или комментариям к фото. Учитывайте следующие ограничения:
-- пользователь не может дважды лайкнуть одну и ту же сущность;
-- пользователь имеет право отозвать лайк;
-- необходимо иметь возможность считать число полученных сущностью лайков и выводить список пользователей, поставивших лайки;
-- в будущем могут появиться новые виды сущностей, которые можно лайкать.


CREATE TABLE `social_network_chatter`.`photo` (
  `id_photo` INT NOT NULL AUTO_INCREMENT,
  `name_photo` VARCHAR(255) NULL,
  `id_user` INT NOT NULL,
  PRIMARY KEY (`id_photo`),
  INDEX `fk_id_user_photo_idx` (`id_user` ASC) VISIBLE,
  CONSTRAINT `fk_id_user_photo`
    FOREIGN KEY (`id_user`)
    REFERENCES `social_network_chatter`.`users` (`id_user`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

CREATE TABLE `social_network_chatter`.`comment_photo` (
  `id_comment` INT NOT NULL AUTO_INCREMENT,
  `comment` VARCHAR(255) NULL,
  `id_user` INT NOT NULL,
  `id_photo` INT NOT NULL,
  UNIQUE INDEX `id_photo_UNIQUE` (`id_photo` ASC) VISIBLE,
  PRIMARY KEY (`id_comment`),
  INDEX `fk_id_user_comment_idx` (`id_user` ASC) VISIBLE,
  CONSTRAINT `fk_id_user_comment`
    FOREIGN KEY (`id_user`)
    REFERENCES `social_network_chatter`.`users` (`id_user`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_id_photo_comment`
    FOREIGN KEY (`id_photo`)
    REFERENCES `social_network_chatter`.`photo` (`id_photo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


insert into `social_network_chatter`.`photo` (`id_user`) values (1), (2), (3);

drop table likes;

create table `likes` (
id_user int,
like_to_user int,
like_to_photo int,
like_to_comment int,
UNIQUE KEY `user_id` (`id_user`,`like_to_photo`),
UNIQUE KEY `user_id_2` (`id_user`,`like_to_comment`),
UNIQUE KEY `user_id_3` (`id_user`,`like_to_user`)
);

INSERT INTO `social_network_chatter`.`likes` (`id_user`, `like_to_user`) VALUES (1, 2), (1, 3), (1, 4), (2, 1), (2, 3), (3, 1), (3, 4), (4, 1), (4, 2), (4, 3);

INSERT INTO `social_network_chatter`.`likes` (`id_user`, `like_to_photo`) VALUES (1, 2), (2, 2), (2, 3), (3, 3);

INSERT INTO `social_network_chatter`.`likes` (`id_user`, `like_to_comment`) VALUES (2,1), (3,1);


SELECT
 users.id_user, users.user_nickname as `nick`,
  count(distinct l1.id_user) likes_get,
  count(distinct l2.like_to_user) likes_sent,
  sum(IF(l1.id_user = l2.like_to_user, 1, 0)) cross_like
FROM users
LEFT JOIN likes l1 ON users.id_user = l1.like_to_user
LEFT JOIN likes l2 ON users.id_user = l2.id_user
GROUP BY users.id_user;

SELECT
  id_user,
  SUM(IF(like_to_user = 1, 1, 0)) t1,
  SUM(IF(like_to_user = 2, 1, 0)) t2,
  SUM(IF(like_to_user = 3, 1, 0)) t3
FROM likes
GROUP BY id_user
HAVING (t1 = 1 AND t2 = 1 AND t3 = 0);






